start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = as.character(timespan["frequência"]))
exrate_EA$iso2c <- "DE"
exrate <- dplyr::bind_rows(exrate_paises_iso, exrate_EA)
View(exrate)
corte_2014t2 <- c("2014-07","2014-08","2014-09","2014-10","2014-11","2014-12")
exrate_2014 <- dplyr::filter(.data = exrate, !exrate$year_month %in% corte_2014t2)
save(exrate, file = "exrate.Rdata")
save(exrate_2014, file = "exrate_2014.Rdata")
save(exrate, file = "data//exrate.Rdata")
save(exrate_2014, file = "data//exrate_2014.Rdata")
library(tidyverse)
colnames(exrate)
exrate_wide <- pivot_wider(data = exrate,names_from = "iso2c",values_from = "ENDE_XDC_USD_RATE")
View(exrate_wide)
library(tidyverse)
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data//paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data//timespan.Rdata")
rm(list=ls())
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data//paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data//timespan.Rdata")
save(timespan, file = "data/timespan.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data//timespan.Rdata")
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data/paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data/timespan.Rdata")
# Vetor timespan
timespan <- c(1999, 2020, "M")
names(timespan) <- c("início","final","frequência")
save(timespan, file = "data/timespan.Rdata")
rm(list=ls())
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data/paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data/timespan.Rdata")
# Usa surexr::ifs_data para baixar o volume de PIB trimestral, em USD, 2010=100, sazonalmente ajustado
# Os países são aqueles definidos em países_iso
# O período amostral é aquele definido em timespan
# É preciso assegurar que start e end sejam valores numéricos, daí o uso de as.numeric
# Analogamente para freq, que deve ser character
# NGDP_R_K_SA_IX conforme surexr::ifs_indicators
gdp_sa <- surexr::ifs_data(indicator = "NGDP_R_K_SA_IX",
country = paises_iso,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = "Q")
# Segundo a dissertação, há países que não possuem dados sazonalmente ajustados na base. Quais?
gdp_sa_faltantes <- paises_iso[which(!paises_iso %in% gdp_sa$iso2c)]
# Mesmo processo anterior, mas para países em gdp_sa_faltantes
# Código: NGDP_R_K_IX
gdp_nsa <- surexr::ifs_data(indicator = "NGDP_R_K_IX",
country = gdp_sa_faltantes,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = "Q")
cod_gdp_sa <- "NGDP_R_K_SA_IX"
# Usa surexr::ifs_data para baixar o volume de PIB trimestral, em USD, 2010=100, sazonalmente ajustado
# Os países são aqueles definidos em países_iso
# O período amostral é aquele definido em timespan
# É preciso assegurar que start e end sejam valores numéricos, daí o uso de as.numeric
# Analogamente para freq, que deve ser character
# NGDP_R_K_SA_IX conforme surexr::ifs_indicators
gdp_sa <- surexr::ifs_data(indicator = cod_gdp_sa,
country = paises_iso,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = "Q")
cod_gdp_nsa <- "NGDP_R_K_IX"
# Mesmo processo anterior, mas para países em gdp_sa_faltantes
# Código: NGDP_R_K_IX
gdp_nsa <- surexr::ifs_data(indicator = cod_gdp_nsa,
country = gdp_sa_faltantes,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = "Q")
paste0(getwd(),"/x13as")
# Definição do caminho do executável x13
x13_path <- paste0(getwd(),"/x13as")
Sys.setenv(X13_PATH = x13_path)
install.packages("seasonal")
View(gdp_nsa)
View(gdp_nsa)
ts(start = c(1999, 1), end = c(2017, 1), frequency = 4)
# Transformação das séries em objetos do tipo ts
ts_pe <- gdp_nsa %>%
pivot_wider(names_f rom = "iso2c",values_from = cod_gdp_nsa) %>%
select(PE) %>%
ts(start = c(1999, 1), end = c(2017, 1), frequency = 4)
# Transformação das séries em objetos do tipo ts
ts_pe <- gdp_nsa %>%
pivot_wider(names_from = "iso2c",values_from = cod_gdp_nsa) %>%
select(PE) %>%
ts(start = c(1999, 1), end = c(2017, 1), frequency = 4)
ts_tr <- gdp_nsa %>%
pivot_wider(names_from = "iso2c",values_from = cod_gdp_nsa) %>%
select(TR) %>%
ts(start = c(1999, 1), end = c(2020, 2), frequency = 4)
# Ajuste sazonal automático
gdp_pe_ajustada <- seasonal::seas(x = ts_pe)
View(gdp_pe_ajustada)
gdp_pe_ajustada[["x"]]
gdp_pe_ajustada[["data"]]
gdp_tr_ajustada <- seasonal::seas(x = ts_tr)
View(gdp_tr_ajustada)
gdp_tr_ajustada[["data"]]
gdp <- bind_rows(gdp_nsa, gdp_sa)
View(gdp)
colnames(gdp_nsa)[2] <- cod_gdp_sa
gdp <- bind_rows(gdp_nsa, gdp_sa)
View(gdp_nsa)
rm(list=ls())
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data/paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data/timespan.Rdata")
cod_gdp_sa <- "NGDP_R_K_SA_IX"
cod_gdp_nsa <- "NGDP_R_K_IX"
# Usa surexr::ifs_data para baixar o volume de PIB trimestral, em USD, 2010=100, sazonalmente ajustado
# Os países são aqueles definidos em países_iso
# O período amostral é aquele definido em timespan
# É preciso assegurar que start e end sejam valores numéricos, daí o uso de as.numeric
# Analogamente para freq, que deve ser character
# NGDP_R_K_SA_IX conforme surexr::ifs_indicators
gdp_sa <- surexr::ifs_data(indicator = cod_gdp_sa,
country = paises_iso,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = "Q")
# Segundo a dissertação, há países que não possuem dados sazonalmente ajustados na base. Quais?
gdp_sa_faltantes <- paises_iso[which(!paises_iso %in% gdp_sa$iso2c)]
# Mesmo processo anterior, mas para países em gdp_sa_faltantes
# Código: NGDP_R_K_IX
gdp_nsa <- surexr::ifs_data(indicator = cod_gdp_nsa,
country = gdp_sa_faltantes,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = "Q")
colnames(gdp_nsa)[3] <- cod_gdp_sa
gdp <- bind_rows(gdp_nsa, gdp_sa)
View(gdp)
gdp_wide <- pivot_wider(data = gdp, names_from = "iso2c", values_from = cod_gdp_sa)
View(gdp_wide)
library(tidyverse)
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data//paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data//timespan.Rdata")
cod_exrate <- "ENDE_XDC_USD_RATE"
View(surexr::ifs_indicators)
load("data//exrate.Rdata")
View(exrate)
exrate_wide <- pivot_wider(data = exrate,names_from = "iso2c",values_from = "ENDE_XDC_USD_RATE")
View(exrate_wide)
# Vetor timespan
timespan <- c(1999, 2020, "M")
rm(list=ls())
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data//paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data//timespan.Rdata")
cod_exrate <- "ENDE_XDC_USD_RATE"
# Vetor timespan
timespan <- c(1999, 2020, "M")
names(timespan) <- c("início","final","frequência")
save(timespan, file = "data/timespan.Rdata")
rm(list=ls())
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data//paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data//timespan.Rdata")
cod_exrate <- "ENDE_XDC_USD_RATE"
exrate_paises_iso <- surexr::ifs_data(indicator = cod_exrate,
country = paises_iso,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = as.character(timespan["frequência"]))
exrate_EA <- surexr::ifs_data(indicator = cod_exrate,
country = "U2",
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = as.character(timespan["frequência"]))
exrate_EA$iso2c <- "DE"
exrate <- dplyr::bind_rows(exrate_paises_iso, exrate_EA)
exrate_wide <- pivot_wider(data = exrate,names_from = "iso2c",values_from = "ENDE_XDC_USD_RATE")
corte_2014t2 <- c("2014-07","2014-08","2014-09","2014-10","2014-11","2014-12")
exrate_2014 <- dplyr::filter(.data = exrate, !exrate$year_month %in% corte_2014t2)
save(exrate, file = "data//exrate.Rdata")
save(exrate_2014, file = "data//exrate_2014.Rdata")
View(exrate_wide)
View(exrate_wide)
View(exrate)
View(exrate[is.na(exrate$ENDE_XDC_USD_RATE),])
is.na(exrate$ENDE_XDC_USD_RATE)
which(is.na(exrate$ENDE_XDC_USD_RATE))
rm(list=ls())
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data/paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data/timespan.Rdata")
cod_gdp_sa <- "NGDP_R_K_SA_IX"
cod_gdp_nsa <- "NGDP_R_K_IX"
# Usa surexr::ifs_data para baixar o volume de PIB trimestral, em USD, 2010=100, sazonalmente ajustado
# Os países são aqueles definidos em países_iso
# O período amostral é aquele definido em timespan
# É preciso assegurar que start e end sejam valores numéricos, daí o uso de as.numeric
# Analogamente para freq, que deve ser character
# NGDP_R_K_SA_IX conforme surexr::ifs_indicators
gdp_sa <- surexr::ifs_data(indicator = cod_gdp_sa,
country = paises_iso,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = "Q")
# Segundo a dissertação, há países que não possuem dados sazonalmente ajustados na base. Quais?
gdp_sa_faltantes <- paises_iso[which(!paises_iso %in% gdp_sa$iso2c)]
# Mesmo processo anterior, mas para países em gdp_sa_faltantes
# Código: NGDP_R_K_IX
gdp_nsa <- surexr::ifs_data(indicator = cod_gdp_nsa,
country = gdp_sa_faltantes,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = "Q")
View(surexr::ifs_indicators)
View(gdp_nsa)
colnames(gdp_nsa)[3] <- cod_gdp_sa
gdp <- bind_rows(gdp_nsa, gdp_sa)
gdp_wide <- pivot_wider(data = gdp, names_from = "iso2c", values_from = cod_gdp_sa)
View(gdp_wide)
View(surexr::ifs_countries)
View(surexr::ifs_countries)
NGDP_R_SA_XDC
gdp_domestic <- surexr::ifs_data(indicator = "NGDP_R_SA_XDC",
country = paises_iso,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = "Q")
View(gdp_domestic)
gdp_domestic_wide <- pivot_wider(data = gdp_domestic, values_from = "NGDP_R_SA_XDC", names_from = "iso2c")
View(gdp_domestic_wide)
rm(list=ls())
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data/paises_iso.Rdata")
View(surexr::ifs_countries[surexr::ifs_countries$Code==paises_iso])
View(surexr::ifs_countries[surexr::ifs_countries$Code==paises_iso,])
which(surexr::ifs_countries$Code==paises_iso)
which(surexr::ifs_countries$Code %in %paises_iso)
which(surexr::ifs_countries$Code %in% paises_iso)
View(surexr::ifs_countries[which(surexr::ifs_countries$Code %in% paises_iso),])
rm(list=ls())
library(tidyverse)
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data//paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data//timespan.Rdata")
# Nesta seção define-se os códigos que serão utilizadoss para cada uma das
# séries.
cod_treasury_bills <- "FITB_PA"
cod_deposit_rate <- "FIDR_PA"
cod_gov_bonds <- "FIGB_PA"
treasury_bills <- surexr::ifs_data(indicator = cod_treasury_bills,
country = paises_iso,
start = timespan["início"],
end = timespan["final"],
freq = "M")
treasury_bills_wide <- pivot_wider(treasury_bills, names_from = "iso2c", values_from = "FITB_PA")
deposit_rate <- surexr::ifs_data(indicator = cod_deposit_rate,
country = paises_iso,
start = timespan["início"],
end = timespan["final"],
freq = "M")
deposit_rate_wide <- pivot_wider(deposit_rate, names_from = "iso2c", values_from = "FIDR_PA")
gov_bonds <- surexr::ifs_data(indicator = cod_gov_bonds,
country = paises_iso,
start = timespan["início"],
end = timespan["final"],
freq = "M")
gov_bonds_wide <- pivot_wider(gov_bonds, names_from = "iso2c", values_from = "FIGB_PA")
View(deposit_rate_wide)
View(gov_bonds_wide)
View(treasury_bills_wide)
# Treasury bills
save(treasury_bills, file = "data//treasury_bills.Rdata")
# Deposit rate
save(deposit_rate, file = "data//deposit_rate.Rdata")
# Gov bonds
save(gov_bonds, file = "data//gov_bonds.Rdata")
rm(list=ls())
# Treasury bills
load(file = "data//treasury_bills.Rdata")
# Deposit rate
load(file = "data//deposit_rate.Rdata")
# Gov Bonds
load(file = "data//gov_bonds.Rdata")
colnames(treasury_bills)
treasury_bills_wide <- pivot_wider(treasuy_bills,
names_from = "iso2c",
values_from = colnames(treasury_bills)[3])
treasury_bills_wide <- pivot_wider(treasury_bills,
names_from = "iso2c",
values_from = colnames(treasury_bills)[3])
deposit_rate_wide <- pivot_wider(deposit_rate,
names_from = "iso2c",
values_from = colnames(deposit_rate)[3])
gov_bonds_wide <- pivot_wider(gov_bonds,
names_from = "iso2c",
values_from = colnames(gov_bonds)[3])
View(treasury_bills_wide)
View(deposit_rate)
rm(list=ls())
load(file = "data//treasury_bills.Rdata")
load(file = "data//deposit_rate.Rdata")
load(file = "data//gov_bonds.Rdata")
View(deposit_rate)
View(treasury_bills)
View(gov_bonds)
View(treasury_bills)
treasury_bills["iso2c"=="AU",]
paises_juros[[1]] <- treasury_bills %>%
filter(iso2c == "AU")
treasury_bills %>%
filter(iso2c == "AU")
View(deposit_rate)
View(deposit_rate)
View(treasury_bills)
treasury_bills %>%
pivot_wider(names_from = "iso2c", values_from = colnames(treasury_bills)[3])
i<-"AU"
treasury_bills %>%
pivot_wider(names_from = "iso2c", values_from = colnames(treasury_bills)[3]) %>%
select(i)
treasury_bills %>%
pivot_wider(names_from = "iso2c", values_from = colnames(treasury_bills)[3]) %>%
select(all_of(i))
treasury_bills %>%
pivot_wider(names_from = "iso2c", values_from = colnames(treasury_bills)[3]) %>%
select(year_month, all_of(i))
deposit_rate %>%
pivot_wider(names_from = "iso2c", values_from = colnames(deposit_rate)[3]) %>%
select(year_month, all_of(i))
treasury_bills %>%
pivot_wider(names_from = "iso2c", values_from = colnames(treasury_bills)[3]) %>%
select(year_month, all_of(i))
gov_bonds %>%
pivot_wider(names_from = "iso2c", values_from = colnames(gov_bonds)[3]) %>%
select(year_month, all_of(i))
i<-paises_iso[1]
i
# Lista completa de paises
load(file = "data//paises_iso.Rdata")
i<-1
treasury_bills %>%
pivot_wider(names_from = "iso2c", values_from = colnames(treasury_bills)[3]) %>%
select(year_month, all_of(paises_iso[i]))
aux_treasury <- treasury_bills %>%
pivot_wider(names_from = "iso2c", values_from = colnames(treasury_bills)[3]) %>%
select(year_month, all_of(paises_iso[i]))
aux_deposit <- deposit_rate %>%
pivot_wider(names_from = "iso2c", values_from = colnames(deposit_rate)[3]) %>%
select(year_month, all_of(paises_iso[i]))
aux_gov <- gov_bonds %>%
pivot_wider(names_from = "iso2c", values_from = colnames(gov_bonds)[3]) %>%
select(year_month, all_of(paises_iso[i]))
View(aux_deposit)
full_join(aux_treasury, aux_deposit, aux_gov)
aux_treasury
aux_deposit
aux_gov
treasury_bills %>%
pivot_wider(names_from = "iso2c", values_from = colnames(treasury_bills)[3]) %>%
select(year_month, all_of(paises_iso[i])) %>%
colnames(c("year_month","AU_treasury"))
inner_join(aux_treasury, aux_deposit, aux_gov)
inner_join(aux_treasury, aux_deposit)
full_join(aux_treasury, aux_deposit)
aux_deposit
aux_treasury
full_join(aux_treasury, aux_deposit)
treasury_bills %>%
pivot_wider(names_from = "iso2c", values_from = colnames(treasury_bills)[3]) %>%
select(year_month, all_of(paises_iso[i])) %>%
colnames <- c("year_month","AU_treasury")
i<-1
aux_treasury <- treasury_bills %>%
pivot_wider(names_from = "iso2c", values_from = colnames(treasury_bills)[3]) %>%
select(year_month, all_of(paises_iso[i]))
colnames(aux_treasury) <- c("year_month", paste0(paises_iso[i],"_treasury"))
View(aux_treasury)
aux_treasury <- treasury_bills %>%
pivot_wider(names_from = "iso2c", values_from = colnames(treasury_bills)[3]) %>%
select(year_month, all_of(paises_iso[i]))
colnames(aux_treasury) <- c("year_month", paste0(paises_iso[i],"_treasury"))
aux_deposit <- deposit_rate %>%
pivot_wider(names_from = "iso2c", values_from = colnames(deposit_rate)[3]) %>%
select(year_month, all_of(paises_iso[i]))
colnames(aux_deposit) <- c("year_month", paste0(paises_iso[i],"_deposit"))
aux_gov <- gov_bonds %>%
pivot_wider(names_from = "iso2c", values_from = colnames(gov_bonds)[3]) %>%
select(year_month, all_of(paises_iso[i]))
colnames(aux_gov) <- c("year_month", paste0(paises_iso[i],"_gov"))
View(aux_deposit)
View(aux_treasury)
View(aux_gov)
paises_juros[[i]] <- inner_join(aux_treasury,aux_deposit,aux_gov)
inner_join(aux_treasury,aux_deposit)
test <- aux_treasury %>%
inner_join(aux_deposit) %>%
inner_join(aux_gov)
View(test)
1:length(paises_iso)
rm(list=ls())
# Lista completa de paises
load(file = "data//paises_iso.Rdata")
# Treasury bills
load(file = "data//treasury_bills.Rdata")
# Deposit rate
load(file = "data//deposit_rate.Rdata")
# Gov Bonds
load(file = "data//gov_bonds.Rdata")
# Criação da lista vazia
paises_juros <- list()
for(i in 1:length(paises_iso)){
# Criação de dataframe com o país selecionado de treausury_bills
# Primeiro aux_treasury recebe treasury_bills %>%
# Então faz o pivotamento para separar por cada coluna de país %>%
# Em seguida seleciona a coluna year_month e a coluna referente ao paises_iso[i]
# Renomeia os nomes das colunas do df para possibilitar o join
aux_treasury <- treasury_bills %>%
pivot_wider(names_from = "iso2c", values_from = colnames(treasury_bills)[3]) %>%
select(year_month, all_of(paises_iso[i]))
colnames(aux_treasury) <- c("year_month", paste0(paises_iso[i],"_treasury"))
# Procedimentos analogos:
aux_deposit <- deposit_rate %>%
pivot_wider(names_from = "iso2c", values_from = colnames(deposit_rate)[3]) %>%
select(year_month, all_of(paises_iso[i]))
colnames(aux_deposit) <- c("year_month", paste0(paises_iso[i],"_deposit"))
aux_gov <- gov_bonds %>%
pivot_wider(names_from = "iso2c", values_from = colnames(gov_bonds)[3]) %>%
select(year_month, all_of(paises_iso[i]))
colnames(aux_gov) <- c("year_month", paste0(paises_iso[i],"_gov"))
# O elemento [[i]] de paises_juros recebe o join das três bases acima:
paises_juros <- aux_treasury %>%
inner_join(aux_deposit) %>%
inner_join(aux_gov)
}
View(paises_juros)
rm(list=ls())
# Lista completa de paises
load(file = "data//paises_iso.Rdata")
# Treasury bills
load(file = "data//treasury_bills.Rdata")
# Deposit rate
load(file = "data//deposit_rate.Rdata")
# Gov Bonds
load(file = "data//gov_bonds.Rdata")
# Criação da lista vazia
paises_juros <- list()
for(i in 1:length(paises_iso)){
# Criação de dataframe com o país selecionado de treausury_bills
# Primeiro aux_treasury recebe treasury_bills %>%
# Então faz o pivotamento para separar por cada coluna de país %>%
# Em seguida seleciona a coluna year_month e a coluna referente ao paises_iso[i]
# Renomeia os nomes das colunas do df para possibilitar o join
aux_treasury <- treasury_bills %>%
pivot_wider(names_from = "iso2c", values_from = colnames(treasury_bills)[3]) %>%
select(year_month, all_of(paises_iso[i]))
colnames(aux_treasury) <- c("year_month", paste0(paises_iso[i],"_treasury"))
# Procedimentos analogos:
aux_deposit <- deposit_rate %>%
pivot_wider(names_from = "iso2c", values_from = colnames(deposit_rate)[3]) %>%
select(year_month, all_of(paises_iso[i]))
colnames(aux_deposit) <- c("year_month", paste0(paises_iso[i],"_deposit"))
aux_gov <- gov_bonds %>%
pivot_wider(names_from = "iso2c", values_from = colnames(gov_bonds)[3]) %>%
select(year_month, all_of(paises_iso[i]))
colnames(aux_gov) <- c("year_month", paste0(paises_iso[i],"_gov"))
# O elemento [[i]] de paises_juros recebe o join das três bases acima:
paises_juros[[i]] <- aux_treasury %>%
inner_join(aux_deposit) %>%
inner_join(aux_gov)
}
View(paises_juros)
paises_juros[[1]]
# quando o dado não existe para aquela série. O que faz
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
