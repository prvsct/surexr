save(paises_iso, file = "data/paises_iso.Rdata")
paises_iso
rm(list=ls())
paises_iso <- load(file = "data/paises_iso.Rdata")
paises_iso
paises_iso <- load(file = "data//paises_iso.Rdata")
paises_iso
load(file = "data//paises_iso.Rdata")
paises_iso <- load(file = "data//paises_iso.Rdata")
load(file = "data//paises_iso.Rdata")
# Usa surexr::ifs_data para baixar a taxa nominal de câmbio em USD, fim do período, para os códigos
# ISO em paises_iso, começando em 1999 e até 2020 com frequência mensal
# ENDE_XDC_USD_RATE conforme surexr::ifs_indicators
exrate <- surexr::ifs_data(indicator = "ENDE_XDC_USD_RATE",
country = paises_iso,
start = 1999,
end = 2020,
freq = "M")
# Salva a base de dados, 70kb com 5737 obs, em exrate.Rdata
save(exrate, file = "data//exrate.Rdata")
# Carrega a imagem de países conforme gerada por paises_iso.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data//paises_iso.Rdata")
# Usa surexr::ifs_data para baixar a taxa nominal de câmbio em USD, fim do período, para os códigos
# ISO em paises_iso, começando em 1999 e até 2020 com frequência mensal
# ENDE_XDC_USD_RATE conforme surexr::ifs_indicators
exrate <- surexr::ifs_data(indicator = "ENDE_XDC_USD_RATE",
country = paises_iso,
start = 1999,
end = 2020,
freq = "M")
unique(exrate$iso2c)
count(unique(exrate$iso2c))
plyr::count(unique(exrate$iso2c))
plyrr::count(unique(exrate$iso2c))
dplyr::count(unique(exrate$iso2c))
unique(exrate$iso2c)
dim(unique(exrate$iso2c))
length(unique(exrate$iso2c))
unique(exrate$iso2c) %in% paises_iso
unique(exrate$iso2c)
!unique(exrate$iso2c) %in% paises_iso
unique(exrate$iso2c)
length(unique(exrate$iso2c))
unique(paises_iso)
!paises_iso %in% unique(exrate$iso2c)
which(!paises_iso %in% unique(exrate$iso2c))
paises_iso[which(!paises_iso %in% unique(exrate$iso2c))]
paises_iso
View(exrate)
# Carrega a imagem de países conforme gerada por paises_iso.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data//paises_iso.Rdata")
# Usa surexr::ifs_data para baixar a taxa nominal de câmbio em USD, fim do período, para os códigos
# ISO em paises_iso, começando em 1999 e até 2020 com frequência mensal
# ENDE_XDC_USD_RATE conforme surexr::ifs_indicators
exrate <- surexr::ifs_data(indicator = "ENDE_XDC_USD_RATE",
country = paises_iso,
start = 1999,
end = 2020,
freq = "M")
View(exrate)
exrate_wide <- tidyr::pivot_wider(data = exrate)
View(exrate)
colnames(exrate)
exrate_wide <- tidyr::pivot_wider(data = exrate, names_from = "iso2c", values_from = "ENDE_XDC_USD_RATE")
View(exrate_wide)
View(exrate_wide)
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data//paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data//timespan.Rdata")
# Usa surexr::ifs_data para baixar a taxa nominal de câmbio em USD, fim do período
# Os países são aqueles definidos em países_iso
# O período amostral é aquele definido em timespan
# É preciso assegurar que start e end sejam valores numéricos, daí o uso de as.numeric
# Analogamente para freq, que deve ser character
# ENDE_XDC_USD_RATE conforme surexr::ifs_indicators
exrate <- surexr::ifs_data(indicator = "ENDE_XDC_USD_RATE",
country = paises_iso,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = as.character(timespan["frequência"]))
corte_2014t2 <- c("2014-07","2014-08","2014-09","2014-10","2014-11","2014-12")
exrate <- dplyr::filter(.data = exrate, !exrate$year_month %in% corte_2014t2)
View(exrate)
View(surexr::ifs_indicators)
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data//paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data//timespan.Rdata")
# Usa surexr::ifs_data para baixar a taxa nominal de câmbio em USD, fim do período
# Os países são aqueles definidos em países_iso
# O período amostral é aquele definido em timespan
# É preciso assegurar que start e end sejam valores numéricos, daí o uso de as.numeric
# Analogamente para freq, que deve ser character
# ENDE_XDC_USD_RATE conforme surexr::ifs_indicators
exrate <- surexr::ifs_data(indicator = "ENDE_XDC_USD_RATE",
country = paises_iso,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = as.character(timespan["frequência"]))
corte_2014t2 <- c("2014-07","2014-08","2014-09","2014-10","2014-11","2014-12")
exrate <- dplyr::filter(.data = exrate, !exrate$year_month %in% corte_2014t2)
View(exrate)
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data//paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data//timespan.Rdata")
# Usa surexr::ifs_data para baixar o volume de PIB trimestral, em USD, 2010=100, sazonalmente ajustado
# Os países são aqueles definidos em países_iso
# O período amostral é aquele definido em timespan
# É preciso assegurar que start e end sejam valores numéricos, daí o uso de as.numeric
# Analogamente para freq, que deve ser character
# NGDP_R_K_SA_IX conforme surexr::ifs_indicators
gdp_sa <- surexr::ifs_data(indicator = "NGDP_R_K_SA_IX",
country = paises_iso,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = "Q")
corte_2014t2 <- c("2014-Q3","2014-Q4")
gdp_sa <- dplyr::filter(.data = gdp_sa, !gdp_sa$year_quarter %in% corte_2014t2)
View(gdp_sa)
View(surexr::ifs_indicators)
# Usa surexr::ifs_data para baixar o volume de PIB trimestral, em USD, 2010=100, sazonalmente ajustado
# Os países são aqueles definidos em países_iso
# O período amostral é aquele definido em timespan
# É preciso assegurar que start e end sejam valores numéricos, daí o uso de as.numeric
# Analogamente para freq, que deve ser character
# NGDP_R_K_SA_IX conforme surexr::ifs_indicators
gdp_sa <- surexr::ifs_data(indicator = "NGDP_R_K_IX",
country = paises_iso,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = "Q")
View(gdp_sa)
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data//paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data//timespan.Rdata")
# Usa surexr::ifs_data para baixar a taxa nominal de câmbio em USD, fim do período
# Os países são aqueles definidos em países_iso
# O período amostral é aquele definido em timespan
# É preciso assegurar que start e end sejam valores numéricos, daí o uso de as.numeric
# Analogamente para freq, que deve ser character
# ENDE_XDC_USD_RATE conforme surexr::ifs_indicators
exrate <- surexr::ifs_data(indicator = "ENDE_XDC_USD_RATE",
country = paises_iso,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = as.character(timespan["frequência"]))
corte_2014t2 <- c("2014-07","2014-08","2014-09","2014-10","2014-11","2014-12")
exrate <- dplyr::filter(.data = exrate, !exrate$year_month %in% corte_2014t2)
View(exrate)
View(paises_iso)
surexr::ifs_countries
View(surexr::ifs_countries)
View(exrate)
imfr::all_iso2c
exrate_EA <- surexr::ifs_data(indicator = "ENDE_XDC_USD_RATE",
country = "EA",
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = as.character(timespan["frequência"]))
exrate_EA <- surexr::ifs_data(indicator = "ENDE_XDC_USD_RATE",
country = "EU",
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = as.character(timespan["frequência"]))
exrate_EA <- surexr::ifs_data(indicator = "ENDE_XDC_USD_RATE",
country = "U2",
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = as.character(timespan["frequência"]))
View(exrate_EA)
rm(list=ls())
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data//paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data//timespan.Rdata")
# Usa surexr::ifs_data para baixar a taxa nominal de câmbio em USD, fim do período
# Os países são aqueles definidos em países_iso
# O período amostral é aquele definido em timespan
# É preciso assegurar que start e end sejam valores numéricos, daí o uso de as.numeric
# Analogamente para freq, que deve ser character
# ENDE_XDC_USD_RATE conforme surexr::ifs_indicators
exrate <- surexr::ifs_data(indicator = "ENDE_XDC_USD_RATE",
country = paises_iso,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = as.character(timespan["frequência"]))
exrate_EA <- surexr::ifs_data(indicator = "ENDE_XDC_USD_RATE",
country = "U2",
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = as.character(timespan["frequência"]))
View(exrate_EA)
exrate_EA$iso2c <- "DE"
View(exrate_EA)
exrate_paises_iso <- surexr::ifs_data(indicator = "ENDE_XDC_USD_RATE",
country = paises_iso,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = as.character(timespan["frequência"]))
exrate_EA <- surexr::ifs_data(indicator = "ENDE_XDC_USD_RATE",
country = "U2",
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = as.character(timespan["frequência"]))
exrate_EA$iso2c <- "DE"
rm(list=ls())
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data//paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data//timespan.Rdata")
exrate_paises_iso <- surexr::ifs_data(indicator = "ENDE_XDC_USD_RATE",
country = paises_iso,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = as.character(timespan["frequência"]))
unique(exrate_paises_iso$iso2c)
exrate_EA <- surexr::ifs_data(indicator = "ENDE_XDC_USD_RATE",
country = "U2",
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = as.character(timespan["frequência"]))
exrate_EA$iso2c <- "DE"
exrate <- dplyr::bind_rows(exrate_paises_iso, exrate_EA)
View(exrate)
4416/23
corte_2014t2 <- c("2014-07","2014-08","2014-09","2014-10","2014-11","2014-12")
exrate_2014 <- dplyr::filter(.data = exrate, !exrate$year_month %in% corte_2014t2)
4278/23
View(exrate_2014)
save(exrate, file = "exrate.Rdata")
save(exrate_2014, file = "exrate_2014.Rdata")
library(tidyverse)
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data//paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data//timespan.Rdata")
# Usa surexr::ifs_data para baixar o volume de PIB trimestral, em USD, 2010=100, sazonalmente ajustado
# Os países são aqueles definidos em países_iso
# O período amostral é aquele definido em timespan
# É preciso assegurar que start e end sejam valores numéricos, daí o uso de as.numeric
# Analogamente para freq, que deve ser character
# NGDP_R_K_SA_IX conforme surexr::ifs_indicators
gdp_sa <- surexr::ifs_data(indicator = "NGDP_R_K_SA_IX",
country = paises_iso,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = "Q")
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data//paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data//timespan.Rdata")
# Usa surexr::ifs_data para baixar o volume de PIB trimestral, em USD, 2010=100, sazonalmente ajustado
# Os países são aqueles definidos em países_iso
# O período amostral é aquele definido em timespan
# É preciso assegurar que start e end sejam valores numéricos, daí o uso de as.numeric
# Analogamente para freq, que deve ser character
# NGDP_R_K_SA_IX conforme surexr::ifs_indicators
gdp_sa <- surexr::ifs_data(indicator = "NGDP_R_K_SA_IX",
country = paises_iso,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = "Q")
# Segundo a dissertação, há países que não possuem dados sazonalmente ajustados na base. Quais?
gdp_sa_faltantes <- paises_iso[which(!paises_iso %in% gdp_sa$iso2c)]
# Mesmo processo anterior, mas para países em gdp_sa_faltantes
# Código: NGDP_R_K_IX
gdp_nsa <- surexr::ifs_data(indicator = "NGDP_R_K_IX",
country = gdp_sa_faltantes,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = "Q")
rm(list=ls())
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data//paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data//timespan.Rdata")
# Usa surexr::ifs_data para baixar o volume de PIB trimestral, em USD, 2010=100, sazonalmente ajustado
# Os países são aqueles definidos em países_iso
# O período amostral é aquele definido em timespan
# É preciso assegurar que start e end sejam valores numéricos, daí o uso de as.numeric
# Analogamente para freq, que deve ser character
# NGDP_R_K_SA_IX conforme surexr::ifs_indicators
gdp_sa <- surexr::ifs_data(indicator = "NGDP_R_K_SA_IX",
country = paises_iso,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = "Q")
# Segundo a dissertação, há países que não possuem dados sazonalmente ajustados na base. Quais?
gdp_sa_faltantes <- paises_iso[which(!paises_iso %in% gdp_sa$iso2c)]
# Mesmo processo anterior, mas para países em gdp_sa_faltantes
# Código: NGDP_R_K_IX
gdp_nsa <- surexr::ifs_data(indicator = "NGDP_R_K_IX",
country = gdp_sa_faltantes,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = "Q")
unique(gdp_sa$iso2c)
unique(gdp_nsa$iso2c)
View(gdp_nsa)
unique(gdp_nsa)
unique(gdp_nsa$iso2c)
gdp_nsa_pe <- gdp_nsa[gdp_nsa$iso2c=="PE",]
gdp_nsa_tr <- gdp_nsa[gdp_nsa$iso2c=="TR",]
ts_pe <- ts(data = gdp_nsa_pe)
View(ts_pe)
help("ts")
rm(ts_pe,gdp_nsa_pe,gdp_nsa_tr)
View(gdp_nsa)
View(gdp_nsa)
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data//paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data//timespan.Rdata")
# Usa surexr::ifs_data para baixar o volume de PIB trimestral, em USD, 2010=100, sazonalmente ajustado
# Os países são aqueles definidos em países_iso
# O período amostral é aquele definido em timespan
# É preciso assegurar que start e end sejam valores numéricos, daí o uso de as.numeric
# Analogamente para freq, que deve ser character
# NGDP_R_K_SA_IX conforme surexr::ifs_indicators
gdp_sa <- surexr::ifs_data(indicator = "NGDP_R_K_SA_IX",
country = paises_iso,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = "Q")
# Segundo a dissertação, há países que não possuem dados sazonalmente ajustados na base. Quais?
gdp_sa_faltantes <- paises_iso[which(!paises_iso %in% gdp_sa$iso2c)]
# Mesmo processo anterior, mas para países em gdp_sa_faltantes
# Código: NGDP_R_K_IX
gdp_nsa <- surexr::ifs_data(indicator = "NGDP_R_K_IX",
country = gdp_sa_faltantes,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = "Q")
View(gdp_nsa)
# Vetor timespan
timespan <- c(1999, 2020, "M")
names(timespan) <- c("início","final","frequência")
save(timespan, file = "data/timespan.Rdata")
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data//paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data//timespan.Rdata")
# Usa surexr::ifs_data para baixar o volume de PIB trimestral, em USD, 2010=100, sazonalmente ajustado
# Os países são aqueles definidos em países_iso
# O período amostral é aquele definido em timespan
# É preciso assegurar que start e end sejam valores numéricos, daí o uso de as.numeric
# Analogamente para freq, que deve ser character
# NGDP_R_K_SA_IX conforme surexr::ifs_indicators
gdp_sa <- surexr::ifs_data(indicator = "NGDP_R_K_SA_IX",
country = paises_iso,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = "Q")
# Segundo a dissertação, há países que não possuem dados sazonalmente ajustados na base. Quais?
gdp_sa_faltantes <- paises_iso[which(!paises_iso %in% gdp_sa$iso2c)]
# Mesmo processo anterior, mas para países em gdp_sa_faltantes
# Código: NGDP_R_K_IX
gdp_nsa <- surexr::ifs_data(indicator = "NGDP_R_K_IX",
country = gdp_sa_faltantes,
start = as.numeric(timespan["início"]),
end = as.numeric(timespan["final"]),
freq = "Q")
View(gdp_nsa)
View(surexr::ifs_countries)
1758/21
unique(gdp_sa$iso2c)
View(gdp_sa)
ts_pe <- ts(data = gdp_nsa$NGDP_R_K_IX[gdp_nsa$iso2c=="PE"],
start = c(1999, 1),
end = c(2020, 2)
frequency = 4)
ts_pe <- ts(data = gdp_nsa$NGDP_R_K_IX[gdp_nsa$iso2c=="PE"],
start = c(1999, 1),
end = c(2020, 2),
frequency = 4)
ts_pe <- ts(data = gdp_nsa$NGDP_R_K_IX[gdp_nsa$iso2c=="PE"],
start = c(1999, 1),
end = c(2017, 1),
frequency = 4)
ts_tr <- ts(data = gdp_nsa$NGDP_R_K_IX[gdp_nsa$iso2c=="TR"],
start = c(1999, 1),
end = c(2020, 2),
frequency = 4)
help("x12::new")
??x12::new
help("new")
gdp_sa_pe <- x12::x12(object = ts_pe)
help(x12)
gdp_sa_pe <- x12::x12(object = ts_pe, x12Parameter = new("x12Parameter"))
gdp_sa_pe <- new(Class = "x12Single", ts = ts_pe)
View(gdp_sa_pe)
gdp_sa_tr <- new(Class = "x12Single", ts = ts_tr)
x12_pe <- new(Class = "x12Single", ts = ts_pe)
x12_tr <- new(Class = "x12Single", ts = ts_tr)
gdp_sa_pe <- x12(x12_pe)
gdp_sa_pe <- x12::x12(x12_pe)
getwd()
x12::x12path(path = getwd())
ts_pe <- ts(data = gdp_nsa$NGDP_R_K_IX[gdp_nsa$iso2c=="PE"],
start = c(1999, 1),
end = c(2017, 1),
frequency = 4)
ts_tr <- ts(data = gdp_nsa$NGDP_R_K_IX[gdp_nsa$iso2c=="TR"],
start = c(1999, 1),
end = c(2020, 2),
frequency = 4)
x12_pe <- new(Class = "x12Single", ts = ts_pe)
x12_tr <- new(Class = "x12Single", ts = ts_tr)
gdp_sa_pe <- x12::x12(x12_pe)
help(x12path)
install.packages("x12")
library(x12GUI)
gdp_sa_pe <- x12::x12(x12_pe)
View(gdp_sa_pe)
rm(list=ls())
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data//paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data//timespan.Rdata")
# Vetor timespan
timespan <- c(1999, 2020, "M")
names(timespan) <- c("início","final","frequência")
save(timespan, file = "data/timespan.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data//timespan.Rdata")
rm(list=ls())
# Carrega a imagem de países conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças nos países, verificar se nova versão de países_iso.Rdata foi salva
load(file = "data//paises_iso.Rdata")
# Carrega a imagem do período amostral conforme gerada por definir_base.R
# ATENÇÃO: se houver mudanças no período amostral, verificar se nova versão de timespan.Rdata foi salva
load(file = "data//timespan.Rdata")
View(surexr::ifs_indicators)
timespan
treasury_bills <- surexr::ifs_data(indicator = "FITB_3M_PA",
country = paises_iso,
start = timespan["início"],
end = timespan["final"],
freq = "M")
View(treasury_bills)
treasury_bills_ausentes <- paises_iso[which(!paises_iso %in% unique(treasury_bills$iso2c))]
paises_iso %in% unique(treasury_bills$iso2c))
paises_iso %in% unique(treasury_bills$iso2c)
which(!paises_iso %in% unique(treasury_bills$iso2c))
!paises_iso %in% unique(treasury_bills$iso2c)
unique(treasury_bills$iso2c)
treasury_bills <- surexr::ifs_data(indicator = "FITB_PA",
country = paises_iso,
start = timespan["início"],
end = timespan["final"],
freq = "M")
treasury_bills_ausentes <- paises_iso[which(!paises_iso %in% unique(treasury_bills$iso2c))]
treasury_bills_ausentes
paises_iso
surexr
surexr::ifs_countries$Name[surexr::ifs_countries$Code==treasury_bills_ausentes]
surexr::ifs_countries$Name[surexr::ifs_countries$Code==treasury_bills_ausentes]
surexr::ifs_countries$Code==treasury_bills_ausentes
surexr::ifs_countries
View(surexr::ifs_countries)
surexr::ifs_countries$Name[which(surexr::ifs_countries$Code==treasury_bills_ausentes)]
which(surexr::ifs_countries$Code==treasury_bills_ausentes)
treasury_bills_ausentes
paises_iso
unique(treasury_bills$iso2c)
3202/14
View(treasury_bills)
library(tidyverse)
treasury_bills_wide <- pivot_wider(treasury_bills)
View(treasury_bills_wide)
View(treasury_bills_wide)
treasury_bills_wide <- pivot_wider(treasury_bills, names_from = "iso2c", values_from = "FITB_PA")
View(treasury_bills_wide)
treasury_bills_ausentes
View(surexr::ifs_countries)
treasury_bills_ausentes
View(surexr::ifs_indicators)
View(treasury_bills)
paise_iso
paises_iso
paises_taxa_deposito <- c("AU", "CL", "CO", "KR", "ID", "PE", "SG", "TR")
paises_gov_bonds <- c("NO","DE")
